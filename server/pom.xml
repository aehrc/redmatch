<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>au.csiro.redmatch</groupId>
    <artifactId>redmatch</artifactId>
    <version>1.3.3</version>
  </parent>

  <artifactId>server</artifactId>
  <packaging>jar</packaging>

  <name>Redmatch Server</name>
  <description>Backend for Redmatch, a tool designed to transform REDCap forms into FHIR resources.</description>

  <properties>
    <java.version>11</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <hapi.version>4.2.0</hapi.version>
    <apache-httpclient.version>4.5.12</apache-httpclient.version>
    <apache-poi.version>4.1.2</apache-poi.version>
    <antlr.version>4.8-1</antlr.version>
    <antlr4.visitor>true</antlr4.visitor>
    <antlr4.listener>true</antlr4.listener>
    <springfox-swagger.version>2.9.2</springfox-swagger.version>
    <wiremock.version>2.26.3</wiremock.version>
    <jib.version>3.1.1</jib.version>
    <start-class>au.csiro.redmatch.Application</start-class>
  </properties>

  <dependencies>
    <!-- Spring Boot web support. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Spring Boot JPA support and H2 database. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- Spring Boot security support. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
    <!-- Used by Fitbit URL validator and no longer included in Spring Boot. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <!-- Spring Boot testing support. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Used to process REDCap JSON files. -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>
    <!-- Used to support FHIR. -->
    <dependency>
      <groupId>ca.uhn.hapi.fhir</groupId>
      <artifactId>hapi-fhir-base</artifactId>
      <version>${hapi.version}</version>
    </dependency>
    <dependency>
      <groupId>ca.uhn.hapi.fhir</groupId>
      <artifactId>hapi-fhir-structures-r4</artifactId>
      <version>${hapi.version}</version>
    </dependency>
    <dependency>
      <groupId>ca.uhn.hapi.fhir</groupId>
      <artifactId>hapi-fhir-client</artifactId>
      <version>${hapi.version}</version>
    </dependency>
    <!-- Used to communicate with REDCap. -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpmime</artifactId>
    </dependency>
    <!-- Used to generate and read Excel spreadsheets (to do mapping). -->
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>${apache-poi.version}</version>
    </dependency>
    <!-- Used to build the compilers for the rules language. -->
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>antlr4-runtime</artifactId>
      <version>${antlr.version}</version>
    </dependency>
    <!-- Used to generate documentation. -->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${springfox-swagger.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>${springfox-swagger.version}</version>
      <scope>compile</scope>
    </dependency>
    <!-- Used to do internal operations with graphs. -->
    <dependency>
      <groupId>org.jgrapht</groupId>
      <artifactId>jgrapht-core</artifactId>
      <version>1.5.0</version>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
      <resource>
        <directory>src/main/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <!-- Used to copy files around. -->
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!-- Copies filtered Docker Compose file to project root. -->
          <execution>
            <id>copy-docker-compose</id>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <copy file="${project.build.outputDirectory}/docker-compose.yml"
                      toFile="${project.basedir}/../docker-compose.yml" overwrite="true" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <!-- Used to copy the UI files as static resources. -->
          <execution>
            <id>copy-ui</id>
            <phase>compile</phase>
            <configuration>
              <target>
                <copy todir="${project.basedir}/target/classes/public">
                  <fileset dir="${project.basedir}/../ui/build"/>
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Used to add the source code files generated from the ANTLR grammar to the project. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>target/generated-sources/antlr4/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Used to configure the Java compiler. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <compilerArgs>
            <arg>-Xlint</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- Used to create a fully executable JAR file. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
        </configuration>
      </plugin>
      <!-- Used to compile the ANTLR grammar and generate the parser files. -->
      <plugin>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>${antlr.version}</version>
        <executions>
          <!-- Used to create the Java files. -->
          <execution>
            <id>antlr-java</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>antlr4</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/generated-sources/antlr4/java</outputDirectory>
              <arguments>
                <argument>-Dlanguage=Java</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <sourceDirectory>${basedir}/src/main/antlr4</sourceDirectory>
          <libDirectory>${basedir}/src/main/antlr4/au/csiro/redmatch/grammar</libDirectory>
        </configuration>
      </plugin>
      <!-- Used to generate a summary of the licenses for all libraries in this project. Needs to run from the command
      line using mvn license:add-third-party. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>2.0.0</version>
        <executions>
          <execution>
            <id>add-third-party</id>
            <goals>
              <goal>add-third-party</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <thirdPartyFilename>DISCLAIMER.txt</thirdPartyFilename>
          <outputDirectory>${project.basedir}</outputDirectory>
        </configuration>
      </plugin>
      <!-- Used to create a Docker image. -->
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>${jib.version}</version>
        <configuration>
          <from>
            <image>openjdk:17-slim-buster</image>
            <platforms>
              <platform>
                <architecture>amd64</architecture>
                <os>linux</os>
              </platform>
              <platform>
                <architecture>arm64</architecture>
                <os>linux</os>
              </platform>
            </platforms>
          </from>
          <to>
            <image>docker.io/aehrc/redmatch</image>
            <tags>
              <tag>${project.version}</tag>
              <tag>latest</tag>
            </tags>
          </to>
          <container>
            <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
            <volumes>
              <volume>/usr/share/redmatch</volume>
            </volumes>
            <format>Docker</format>
          </container>
          <containerizingMode>packaged</containerizingMode>
        </configuration>
        <executions>
          <execution>
            <phase>deploy</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Used to configure unit tests. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <useSystemClassLoader>false</useSystemClassLoader>
          <forkCount>0</forkCount>
          <argLine>
            – illegal-access=permit
          </argLine>
        </configuration>
      </plugin>
      <!-- Used to configure integration tests. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <useSystemClassLoader>false</useSystemClassLoader>
          <forkCount>0</forkCount>
          <argLine>
            – illegal-access=permit
          </argLine>
          <classesDirectory>${project.build.outputDirectory}</classesDirectory>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <!-- Used to build an amd64 version of the Docker image locally during the package phase.  -->
    <profile>
      <id>local-docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${jib.version}</version>
            <configuration>
              <from>
                <image>openjdk:17-slim-buster</image>
                <platforms>
                  <platform>
                    <architecture>amd64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>docker.io/aehrc/redmatch</image>
                <tags>
                  <tag>${project.version}</tag>
                  <tag>latest</tag>
                </tags>
              </to>
              <container>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                <volumes>
                  <volume>/usr/share/redmatch</volume>
                </volumes>
                <format>Docker</format>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- Used to build an arm64 version of the Docker image locally during the package phase.  -->
    <profile>
      <id>local-docker-m1</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${jib.version}</version>
            <configuration>
              <from>
                <image>openjdk:17-slim-buster</image>
                <platforms>
                  <platform>
                    <architecture>arm64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>docker.io/aehrc/redmatch</image>
                <tags>
                  <tag>${project.version}</tag>
                  <tag>latest</tag>
                </tags>
              </to>
              <container>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                <volumes>
                  <volume>/usr/share/redmatch</volume>
                </volumes>
                <format>Docker</format>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
