<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>au.csiro</groupId>
    <version>0.9.1</version>
    <artifactId>redmatch</artifactId>
    <name>Redmatch</name>
    <description>Rules engine that allows transforming REDCap forms into FHIR resources.</description>
    <url>http://ontoserver.csiro.au/</url>

    <organization>
        <name>Australian e-Health Research Centre, CSIRO</name>
        <url>https://aehrc.com/</url>
    </organization>

    <developers>
      <developer>
        <name>Alejandro Metke</name>
        <organization>Australian e-Health Research Centre, CSIRO</organization>
        <organizationUrl>http://aehrc.com</organizationUrl>
        <roles>
          <role>architect</role>
          <role>developer</role>
        </roles>
        <timezone>+10</timezone>
      </developer>
    </developers>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath />
    </parent>

    <properties>
        <java.version>11</java.version>
        <hapi.version>4.2.0</hapi.version>
        <apache-httpclient.version>4.5.12</apache-httpclient.version>
        <apache-poi.version>4.1.2</apache-poi.version>
        <antlr.version>4.8-1</antlr.version>
        <antlr4.visitor>true</antlr4.visitor>
        <antlr4.listener>true</antlr4.listener>
        <springfox-swagger.version>2.9.2</springfox-swagger.version>
        <wiremock.version>2.26.3</wiremock.version>
        <dockerfile-maven.version>1.4.13</dockerfile-maven.version>
        <start-class>au.csiro.redmatch.Application</start-class>
    </properties>
    
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <activatedProperties>dev</activatedProperties>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <activatedProperties>prod</activatedProperties>
            </properties>
        </profile>
    </profiles>

    <dependencies>
        <!-- Spring Boot web support. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--  Spring Boot MongoDB support. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <!-- Spring Boot testing support. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Used to process REDCap JSON files. -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <!-- Used to support FHIR. -->
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-base</artifactId>
            <version>${hapi.version}</version>
        </dependency>
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-structures-r4</artifactId>
            <version>${hapi.version}</version>
        </dependency>
        <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-client</artifactId>
            <version>${hapi.version}</version>
        </dependency>
        <!--  Used to communicate with REDCap. -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
        </dependency>
        <!-- Used to generate and read Excel spreadsheets (to do mapping). -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${apache-poi.version}</version>
        </dependency>
        <!-- Used to build the compilers for the rules language. -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>${antlr.version}</version>
        </dependency>
        <!-- Embedded version of MondoDB. -->
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Used to generate documentation. -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Used to add the source code files generated from the ANTLR grammar to the project.  -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/generated-sources/antlr4/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Used to configure the Java compiler.  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!-- Used to create a fully executable JAR file. -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration> 
                    <executable>true</executable> 
                </configuration>
            </plugin>
            <!-- Used to compile the ANTLR grammar and generate the parser files. -->
            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-maven-plugin</artifactId>
                <version>${antlr.version}</version>
                <executions>
                  <!-- Used to create the Javascript files. -->
                  <execution>
                    <id>antlr-javascript</id>
                    <phase>generate-sources</phase>
                    <goals>
                      <goal>antlr4</goal>
                    </goals>
                    <configuration>
                      <outputDirectory>${project.build.directory}/generated-sources/antlr4/javascript</outputDirectory>
                      <arguments>
                        <argument>-Dlanguage=JavaScript</argument>
                        <argument>-no-listener</argument>
                        <argument>-no-visitor</argument>
                      </arguments>
                    </configuration>
                  </execution>
                  <!-- Used to create the Java files. -->
                  <execution>
                    <id>antlr-java</id>
                    <phase>generate-resources</phase>
                    <goals>
                      <goal>antlr4</goal>
                    </goals>
                    <configuration>
                      <outputDirectory>${project.build.directory}/generated-sources/antlr4/java</outputDirectory>
                      <arguments>
                        <argument>-Dlanguage=Java</argument>
                      </arguments>
                    </configuration>
                  </execution>
                </executions>
                <configuration>
                  <sourceDirectory>${basedir}/src/main/antlr4</sourceDirectory>
                  <libDirectory>${basedir}/src/main/antlr4/au/csiro/redmatch/grammar</libDirectory>
                </configuration>
            </plugin>
            <!-- Used to implement the GitFlow pattern in this project. -->
            <plugin>
                <groupId>external.atlassian.jgitflow</groupId>
                <artifactId>jgitflow-maven-plugin</artifactId>
                <version>1.0-m5.1</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <useReleaseProfile>false</useReleaseProfile>
                    <noDeploy>true</noDeploy>
                </configuration>
            </plugin>
            <!-- Used to generate a summary of the licenses for all libraries used in this project. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.0.0</version>
                <executions>
                    <execution>
                      <id>download-licenses</id>
                      <goals>
                          <goal>download-licenses</goal>
                      </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Used to create a Docker image. -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven.version}</version>
                <executions>
                    <execution>
                      <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                      </goals>
                    </execution>
                </executions>
                <configuration>
                    <repository>aehrc/redmatch</repository>
                    <tag>${project.version}</tag>
                </configuration>
              </plugin>
        </plugins>
    </build>
</project>
